// Code generated by mockery. DO NOT EDIT.

package bluetooth

import (
	"github.com/stretchr/testify/mock"
)

// MockBluetoothManager is an autogenerated mock type for the BluetoothManagerInterface type
type MockBluetoothManager struct {
	mock.Mock
}

type MockBluetoothManager_ConnectDevice_Call struct {
	*mock.Call
}

// ConnectDevice provides a mock function with given fields: adapterPath, macAddress
func (_m *MockBluetoothManager) ConnectDevice(adapterPath string, macAddress string) error {
	ret := _m.Called(adapterPath, macAddress)

	if len(ret) == 0 {
		panic("no return value specified for ConnectDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(adapterPath, macAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with no fields
func (_m *MockBluetoothManager) Close() {
	_m.Called()
}

// GetAdapterPathByMAC provides a mock function with given fields: macAddress
func (_m *MockBluetoothManager) GetAdapterPathByMAC(macAddress string) (string, error) {
	ret := _m.Called(macAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetAdapterPathByMAC")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(macAddress)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(macAddress)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(macAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdapters provides a mock function with no fields
func (_m *MockBluetoothManager) GetAdapters() ([]Adapter, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAdapters")
	}

	var r0 []Adapter
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Adapter, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Adapter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Adapter)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectedDevices provides a mock function with given fields: adapterPath
func (_m *MockBluetoothManager) GetConnectedDevices(adapterPath string) ([]Device, error) {
	ret := _m.Called(adapterPath)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectedDevices")
	}

	var r0 []Device
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]Device, error)); ok {
		return rf(adapterPath)
	}
	if rf, ok := ret.Get(0).(func(string) []Device); ok {
		r0 = rf(adapterPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Device)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(adapterPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevices provides a mock function with given fields: adapterPath
func (_m *MockBluetoothManager) GetDevices(adapterPath string) ([]Device, error) {
	ret := _m.Called(adapterPath)

	if len(ret) == 0 {
		panic("no return value specified for GetDevices")
	}

	var r0 []Device
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]Device, error)); ok {
		return rf(adapterPath)
	}
	if rf, ok := ret.Get(0).(func(string) []Device); ok {
		r0 = rf(adapterPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Device)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(adapterPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrustedDevices provides a mock function with given fields: adapterPath
func (_m *MockBluetoothManager) GetTrustedDevices(adapterPath string) ([]Device, error) {
	ret := _m.Called(adapterPath)

	if len(ret) == 0 {
		panic("no return value specified for GetTrustedDevices")
	}

	var r0 []Device
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]Device, error)); ok {
		return rf(adapterPath)
	}
	if rf, ok := ret.Get(0).(func(string) []Device); ok {
		r0 = rf(adapterPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Device)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(adapterPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PairDevice provides a mock function with given fields: adapterPath, macAddress
func (_m *MockBluetoothManager) PairDevice(adapterPath string, macAddress string) error {
	ret := _m.Called(adapterPath, macAddress)

	if len(ret) == 0 {
		panic("no return value specified for PairDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(adapterPath, macAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveDevice provides a mock function with given fields: adapterPath, macAddress
func (_m *MockBluetoothManager) RemoveDevice(adapterPath string, macAddress string) error {
	ret := _m.Called(adapterPath, macAddress)

	if len(ret) == 0 {
		panic("no return value specified for RemoveDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(adapterPath, macAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrustDevice provides a mock function with given fields: adapterPath, macAddress
func (_m *MockBluetoothManager) TrustDevice(adapterPath string, macAddress string) error {
	ret := _m.Called(adapterPath, macAddress)

	if len(ret) == 0 {
		panic("no return value specified for TrustDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(adapterPath, macAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockBluetoothManager creates a new instance of MockBluetoothManager. It also registers a testing interface on the mock and a cleanup function to assert the mock's expectations.
// The first argument is typically a *testing.T value.
func NewMockBluetoothManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBluetoothManager {
	mock := &MockBluetoothManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}